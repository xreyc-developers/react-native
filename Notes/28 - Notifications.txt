## NOTIFICATIONS

## LOCAL NOTIFICATION'
- triggered by app, displayed locally to the user
- not sent to other users or devices

## PUSH NOTIFICATION
- received by app, displayed locally by the user
- sent remotely to one or many users and devices


## INSTALLATION
expo install expo-notifications

@ App.json
"android": {
  "useNextNotificationsAPI": true
}

## APPLICATION
///////////////////////// SAMPLE 1 /////////////////////////
import * as Notifications from 'expo-notifications';
import * as Permissions from 'expo-permissions';

const App = () => {
  // PERMISSION (CHECK THE PERMISSION)
  useEffect(() => {
    Permissions.getAsync(Permissions.NOTIFICATIONS)
    .then(statusObj => {
      if(statusObj.status !== 'granted') {
        return Permissions.askAsync(Permissions.NOTIFICATIONS);
      }
      return statusObj;
    })
    .then(statusObj => {
      if(statusObj.status !== 'granted') {
        return;
      }
    })
  }, [])

  // TRIGGER NOTIFICATION
  const triggerNotification = () => {
    Notifications.scheduleNotificationAsync({
      content: {
        title: 'My first local notification',
        body: 'This is the first local notification'
      },
      trigger: {
        seconds: 10
      }
    });
  }

  return (
    <View>
      <Button title="Trigger Notification" onPress={} />
    </View>
  )
}

///////////////////////// SAMPLE 2 /////////////////////////
import * as Notifications, {} from 'expo-notifications';
import * as Permissions from 'expo-permissions';

Notifications.setNotificationHandler({
  handleNotification: async () => {
    return {
      shouldShowAlert: true
    };
  }
});

const App = () => {
  // PERMISSION (CHECK THE PERMISSION)
  useEffect(() => {
    Permissions.getAsync(Permissions.NOTIFICATIONS)
    .then(statusObj => {
      if(statusObj.status !== 'granted') {
        return Permissions.askAsync(Permissions.NOTIFICATIONS);
      }
      return statusObj;
    })
    .then(statusObj => {
      if(statusObj.status !== 'granted') {
        return;
      }
    })
  }, []);

  useEffect(() => {
    // NOTIFICATION LISTENER (APP IS CLOSED)
    // RUNS EVEN THE APP IS NOT RUNNING
    const backgroundSubscription = Notification.addNotificationResponseReceiveListener(reponse => {
      console.log(response)
    });

    // NOTIFICATION LISTENER (APP IS OPEN)
    // LISTENS FOR INCOMING NOTIFICATIONS WHILE THE APP IS OPEN
    const foregroudSubscription = Notifications.addNotificationReceivedListener(notification => {
      console.log(notification);
    });

    // executed when the component is about to run for the second time
    // executed on unmount
    return () => {
      backgroundSubscription.remove();
      foregroudSubscription.remove();
    }
  }, [])

  // TRIGGER NOTIFICATION (CREATE A NOTIFICATION)
  const triggerNotification = () => {
    Notifications.scheduleNotificationAsync({
      content: {
        title: 'My first local notification',
        body: 'This is the first local notification',
        data: { mySpecialData: 'Some text' } // YOU CAN USE THIS DATA FOR YOUR LOGIC
      },
      trigger: {
        seconds: 10
      }
    });
  }

  return (
    <View>
      <Button title="Trigger Notification" onPress={} />
    </View>
  )
}
